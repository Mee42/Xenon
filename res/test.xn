func [T, R] cast(T t) R {}// intrinsic

struct[T] List {
    Int size;
    Int allocated;
    T* data;
}
struct[A, B] Pair {
    A a;
    B b;
}
struct[T] Foo {
    List[Pair[T, T]] list;
}

func[T] malloc(UInt count) T* {
    return cast::[UInt, T*](sizeof::[T]() * count);
    // just returns the number of bytes in the size thing
    // for testing
}
func print(Char x) {} // intrinsic
func print(Char* x) {
    loop {
        if(*x == cast::[Int, Char*](0)) break;
        print(*x);
        x = x + 1;
    }
} // not an intrinsic

func foo() {
   val cond = 7;
   val Int x = if(cond == 0) {
        print("true!");
        break 7;
   } else {
        print("not true");
        break 8;
   };

   val Pair[Int*, Char*] pair = struct Pair[Int*, Char*] {
        .a = malloc::[Int](3u),
        .b = malloc::[Char](7u)
   };
   *((&pair)->a) = 7;
   *pair.a = 7;
}


func[T] realloc(T* ptr, Int size) T*  {
    return ptr // who cares honestly
}

func[T] newList() List[T] {
    return struct List[T] { // the type 'List[T]' is optional when can be inferred
        .size      = 0,
        .allocated = 10,
        .data      = malloc::[T](10u),
    };
}

func[T] (List[T]* self).add(T element) {
    if(self->size == self->allocated) {
        self->allocated = self->allocated * 2;
        self->data = realloc::[T](self->data, self->allocated);
    };
    self->size = self->size + 1;
    self->data[self->size] = element;
}

func main() UInt {
   val List[Int] numbers = newList::[Int]();
   add::[Int](&numbers, 7);
   add::[Int](&numbers, 8);
   (&numbers).add::[Int](3);
    return 0u;
}