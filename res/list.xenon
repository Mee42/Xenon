

struct List {
    int length
    int allocated
    int* data
}
// the constructor, but really just a free floating function
List List(){
    val l = List{}
    l.length = 0
    l.allocated = 10
    l.data = malloc_int(40)
    return l
}

int print(List l){
    print("[")
    mut val i = 0
    while true {
        print(*(l.data + i))
        i = i + 1
        if i == l.length {
            print("]")
            return 0
        }
        print(", ")
    }
    return 0
}

int memcpy(int* a, int* b, int bytes){
    mut val i = 0
    while i != bytes {
        *(b + i) = *(a + i)
        i = i + 1
    }
    return 0
}

@member int put(List+ l, int element) {
   
    if (*l).length == (*l).allocated { // we need to resize the list
        val oldAllocated = (*l).allocated
        (*l).allocated = oldAllocated + oldAllocated
//        // TODO write a memcpy implementation
        val new_ptr = malloc_int(oldAllocated + oldAllocated)
        memcpy((*l).data, new_ptr, oldAllocated)
        (*l).data = new_ptr
    }
    
    //*l.data
    mut val ptr = (*l).data
    *(ptr + (*l).length) = element
    //*((*l).data + (*l).length) = element
    (*l).length = (*l).length + 1
    return 0
}
@member int removeLast(List+ l){
    (*l).length = (*l).length - 1
    return 0
}

int main() {
    val numbers = List()
    mut val i = 0
    while i != 15 {
        &numbers#put(i)
        i = i + 1
    }
    print(numbers) 
    println()
    &numbers#removeLast()
    print(numbers)
    println()
    print("length: ")
    println(numbers.length)
    return 0
}









