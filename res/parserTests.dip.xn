basic empty function
func main() Unit {

}
<=>
func main() Unit {

}
=============================
implicit Unit return type

func main() {

}
<=>
func main() Unit {

}
=============================
variable definition

func main() {
    val a;
    val b;
}
<=>
func main() Unit {
    val a;
    val b;
}
=============================
variable definition 2

func main() {
    val a = var Int b = var c;
}
<=>
func main() Unit {
    val a = var Int b = var c;
}
=============================
variable definition with expression

func main() {
    val a = (1 * 2) + 3;
    val b = 1 + a * a;
}
<=>
func main() Unit {
    val a = (1 * 2) + 3;
    val b = 1 + (a * a);
}
=============================
function calls

func main() {
    val x = f(1, 2, 3);
    ff(var y = 7 + x * 3, ff(ff(ff(1))));
}
<=>
func main() Unit {
    val x = f(1, 2, 3);
    ff(var y = 7 + (x * 3), ff(ff(ff(1))));
}
=============================
prefix operators

func main() {
    val a = - - - 1;
    val b = & * & a;
    val c = - ! & *a;
}
<=>
func main() Unit {
    val a = ---1;
    val b = &*&a;
    val c = -!&*a;
}
==============================
if statements
func main() {
    if(a == b) x else y;
    val x = if(a == b) {
        f(1);
    } else {
        f(2);
    };
    if(a) {
        f(1);
    } else if(b) {
        f(2);
    } else {
        f(3);
    };
    if(if(a) true else false) print(1);
}
<=>
func main() Unit {
    if(a == b) x else y;
    val x = if(a == b) {
        f(1);
    } else {
        f(2);
    };
    if(a) {
        f(1);
    } else if(b) {
        f(2);
    } else {
        f(3);
    };
    if(if(a) true else false) print(1);
}
==========================
function return types
func main() Int**** {
    val Int* a = 7;
}
<=>
func main() Int**** {
    val Int* a = 7;
}
==========================
lexing characters
func main() Unit {
    val Char a = 'x';
}
<=>
func main() Unit {
    val Char a = 'x';
}
==========================
string literals
func main() Unit {
    val Char* x = "Hello, world!";
    println(x);
}
<=>
func main() Unit {
    val Char* x = "Hello, world!";
    println(x);
}
==========================
structs
struct String {
    Char* address;
}
<=>
struct String {
    Char* address;
}
==========================
loops
func main() Unit {
    loop {
        print("hi!");
    };
}
<=>
func main() Unit {
    loop {
        print("hi!");
    };
}
==========================
labeled loops
func main() Unit {
    loop@foo {
        print("hi!");
    };
}
<=>
func main() Unit {
    loop@foo {
        print("hi!");
    };
}
==========================
labeled blocks
func main() Unit {
    @foo {
        print("hi!");
    };
}
<=>
func main() Unit {
    @foo {
        print("hi!");
    };
}
==========================
using yield in a block, unlabeled and labeled
func main() Unit {
    @foo {
        {
            yield@foo 3;
            yield 4;
        };
    };
}
<=>
func main() Unit {
    @foo {
        {
            yield@foo 3;
            yield 4;
        };
    };
}
==========================
using continue in a loop
func main() Unit {
    loop@foo {
        loop {
            continue;
            continue@foo;
            yield@foo 7;
            yield 7;
        };
    };
}
<=>
func main() Unit {
    loop@foo {
        loop {
            continue;
            continue@foo;
            yield@foo 7;
            yield 7;
        };
    };
}

