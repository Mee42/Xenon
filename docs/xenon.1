'\" t
.\"     Title: xenon
.\"    Author: Carson Graham
.\" Generator: Asciidoctor 2.0.10
.\"      Date: 2020-04-16
.\"    Manual: Xenon Manual
.\"    Source: Xenon latest commit
.\"  Language: English
.\"
.TH "XENON" "1" "2020-04-16" "Xenon latest commit" "Xenon Manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
xenon \- A natively compiled programming language similar to C
.SH "SYNOPSIS"
.sp
xenon [\fIOPTIONS\fP]... \fIFILE\fP
.SH "DESCRIPTION"
.sp
The xenon(1) command converts Xenon Source file \fIFILE\fP into NASM assembly, object files, or x64/x86 machine code.
Single\-character options \fIcannot\fP be combined into the same block, ie \f(CR\-fe\fP.
.SH "OPTIONS"
.SS "Generic Options"
.sp
\-V, \-\-version
.RS 4
Print the version of the xenon compiler
.RE
.sp
\-h, \-\-help
.RS 4
Print this help menu
.RE
.SS "Compiler Options"
.sp
\-f \fIFORMAT\fP, \-\-format \fIFORMAT\fP
.RS 4
\fIFORMAT\fP must be one of the following: \fINASM\fP, \fIOBJECT\fP, \fINATIVE\fP, \fIRUN\fP.
By default, it is native. \fINASM\fP will output only assembly (in NASM format).
\fIOBJECT\fP will output the assembly after it\(cqs been ran through the NASM command (see below).
\fINATIVE\fP will run the object file through the gcc command, outputting a binary executable.
\fIRUN\fP will run the outputted binary executable after it is created.
.RE
.sp
\-\-run
.RS 4
A shortcut for \-\-format RUN
.RE
.sp
\-\-nasm \fINASM_COMMAND\fP
.RS 4
\fINASM_COMMAND\fP is a string which is ran through a find\-replace and then executed.
\f(CR{i}\fP is replaced by the input file name/path, in quotes,
and \f(CR{o}\fP is replaced by the output file in the same way.
This command is ran at in the \fIBUILD_DIR\fP/\fIFILENAME_ID\fP/ directory, so it may create files.
.sp
An example of this: \f(CR\-\-nasm "nasm \-felf64 {i} \-o {o}"\fP
.RE
.sp
\-\-gcc \fIGCC_COMMAND\fP
.RS 4
\fIGCC_COMMAND\fP is similar to the \fINASM_COMMAND\fP, but instead is the object file\-to\-binary command.
It is ran in the same place as the \fINASM_COMMAND\fP.
Nothing is done between the two commands, if they are both scheduled to run.
.sp
As an example, \f(CR\-\-gcc "gcc {i} \-no\-pie \-o {o}"\fP
.RE
.sp
\-b \fIBUILD_DIR\fP, \-\-build \fIBUILD_DIR\fP
.RS 4
The directory to put intermediate build files into.
.sp
The build directory is organized into several folders to mirror the source file structure.
For each file, a directory is created with the name plus a tiny hashcode.
Inside that directory the source file, object file, and binary file are placed.
.RE
.sp
\-t \fITARGET\fP, \-\-target \fITARGET\fP
.RS 4
Where the resulting final binary should be named.
Defaults to a reasonable value.
.RE
.SS "Optimization Options"
.sp
\-o\fINAME\fP, \-\-optimize \fINAME\fP
.RS 4
Enables the optimisation with the name \fINAME\fP.
Possible values include \fIdead\-code\-elem\fP,
\fIinline\-macros\fP, \fIreshuffle\fP, \fIvalue\-propagator\fP, and \fIflatten\-typeless\-blocks\fP
.RE
.sp
\-ono\fINAME\fP, \-\-optimize no\fINAME\fP
.RS 4
Disable the optimization with the name \fINAME\fP.
See above for options.
.RE
.sp
\-O\fIN\fP, \-\-optimization\-level \fIN\fP
.RS 4
If \fIN\fP is 0, no optimization is applied. The is the default.
If \fIN\fP is an integer between 1 and 10 inclusive,
the default optimization settings are enabled and the optimizer is ran \fIN\fP
passes over the AST.
.sp
\fIN\fP=3 is recommended for general development,
\fIN\fP=10 for release,
and \fIN\fP=0 for debugging the compiler.
.RE
.SS "Verbosity Options"
.sp
\-v, \-v\fINAME\fP, \-\-verbose
.RS 4
Enables the verbose output titled \fINAME\fP.
.RE
.TS
allbox tab(:);
lt lt.
T{
.sp
Flag
T}:T{
.sp
Description
T}
T{
.sp
\f(CR\-vend\-timings\fP
T}:T{
.sp
Print how long it took to run and compile.
T}
T{
.sp
\f(CR\-vend\-compile\-timings\fP
T}:T{
.sp
Print how long each portion of the compiler took to run.
T}
T{
.sp
\f(CR\-voptimizations\fP
T}:T{
.sp
Print debug information about how each optimization was applied.
T}
T{
.sp
\f(CR\-vast\fP
T}:T{
.sp
Print both the non\-optimized and optimized AST.
T}
T{
.sp
\f(CR\-vdecompile\-ast\fP
T}:T{
.sp
Print a decompiled AST.
T}
T{
.sp
\f(CR\-vtokens\fP
T}:T{
.sp
Print the lexed tokens.
T}
T{
.sp
\f(CR\-vpurity\fP
T}:T{
.sp
Print the purity of each defined function.
T}
T{
.sp
\f(CR\-vall\fP, \f(CR\-vv\fP
T}:T{
.sp
Print all of the above.
T}
T{
.sp
\f(CR\-v\fP, \f(CR\-\-verbose\fP
T}:T{
.sp
Print a helpful subset of the above.
T}
.TE
.sp
.SH "AUTHOR"
.sp
Carson Graham